// Generated by CoffeeScript 2.3.1
(function() {
  var BusinessDay, OutRangeError, _, list, moment, rejectFromList;

  _ = require('lodash');

  moment = require('moment');

  list = {
    omit_weekend: require('../data/omit_weekend.json'),
    holidays_jp: require('../data/holidays_jp.json'),
    bizday_jp: require('../data/bizday_jp.json')
  };

  OutRangeError = class OutRangeError extends RangeError {
    constructor(momentObject, list) {
      var first, last;
      first = list[0];
      last = _.last(list);
      super(`The valid range is from ${first} to ${last}`);
      this.name = "OutRangeError";
    }

  };

  rejectFromList = function(list, rejectList) {
    if (_.isString(rejectList) || _.isRegExp(rejectList)) {
      rejectList = [rejectList];
    }
    if (_.isArray(rejectList)) {
      rejectList.forEach(function(rejectStr) {
        if (_.isString(rejectStr)) {
          return list = _.reject(list, function(listItem) {
            return listItem.includes(rejectStr);
          });
        } else if (_.isRegExp(rejectStr)) {
          return list = _.reject(list, function(listItem) {
            return listItem.match(rejectStr);
          });
        }
      });
    }
    return list;
  };

  BusinessDay = class BusinessDay {
    static buildCalendar(opts) {
      var _format, endYear, lastYear, now, omitWeekEnd, res, start, startYear;
      opts = opts || {};
      if (!_.isPlainObject(opts)) {
        throw new Error('Argument requires object type');
      }
      now = moment().format('YYYY');
      if (opts.startYear && `${opts.startYear}`.match(/\d{4}/)) {
        startYear = opts.startYear;
      } else {
        startYear = now;
      }
      if (opts.endYear && `${opts.endYear}`.match(/\d{4}/)) {
        endYear = opts.endYear;
      } else {
        endYear = now;
      }
      omitWeekEnd = opts.omitWeekEnd || false;
      _format = 'YYYY-MM-DD';
      start = moment(`${startYear}-01-01`);
      res = [start.format(_format)];
      while (true) {
        start.add(1, 'day');
        lastYear = start.format(_format).match(/\d{4}/)[0];
        if (Number(endYear) < Number(lastYear)) {
          break;
        }
        switch (start.format('E')) {
          case '6':
          case '7':
            if (!omitWeekEnd) {
              res.push(start.format(_format));
            }
            break;
          default:
            res.push(start.format(_format));
        }
      }
      return res;
    }

    static isOutRange(momentObject, list) {
      var first, last;
      first = moment(list[0]);
      last = moment(_.last(list));
      if (momentObject.isBefore(first) || momentObject.isAfter(last)) {
        return true;
      } else {
        return false;
      }
    }

    constructor(day, opts1 = {}) {
      var _rejectList, rejectList;
      this.opts = opts1;
      if (this.opts.type != null) {
        this.list = (function() {
          switch (this.opts.type) {
            case 'jp':
            case 'jpn':
            case 'JP':
            case 'JPN':
            case 392:
              return list.bizday_jp;
            case 'tse':
            case 'TSE':
              _rejectList = ['12-31', '01-01', '01-02', '01-03'];
              return rejectFromList(list.bizday_jp, _rejectList);
            case 'Government':
            case 'government':
            case 'go':
            case 'gov':
              _rejectList = ['12-29', '12-30', '12-31', '01-01', '01-02', '01-03'];
              return rejectFromList(list.bizday_jp, _rejectList);
            default:
              return list.omit_weekend;
          }
        }).call(this);
      } else {
        this.list = list.omit_weekend;
      }
      if (rejectList = this.opts.reject) {
        this.list = rejectFromList(this.list, rejectList);
      }
      this.format = this.opts.format != null ? this.opts.format : 'YYYYMMDD';
      this.m = day ? moment(day) : moment();
      if (BusinessDay.isOutRange(this.m, this.list)) {
        throw new OutRangeError(this.m, this.list);
      }
    }

    val() {
      return this.m.format(this.format);
    }

    add(count = 1) {
      var newIndex, nowDate, nowIndex;
      nowDate = this.m.format('YYYY-MM-DD');
      nowIndex = this.list.indexOf(nowDate);
      if (nowIndex < 0) {
        count--;
      }
      while (nowIndex < 0) {
        this.m.add(1, 'day');
        nowDate = this.m.format('YYYY-MM-DD');
        nowIndex = this.list.indexOf(nowDate);
      }
      newIndex = nowIndex + count;
      if (!this.list[newIndex]) {
        throw new OutRangeError(this.m, this.list);
      }
      this.m = moment(this.list[newIndex]);
      return this.m.format(this.format);
    }

    sub(count = 1) {
      var newIndex, nowDate, nowIndex;
      nowDate = this.m.format('YYYY-MM-DD');
      nowIndex = this.list.indexOf(nowDate);
      if (nowIndex < 0) {
        count--;
      }
      while (nowIndex < 0) {
        this.m.subtract(1, 'day');
        nowDate = this.m.format('YYYY-MM-DD');
        nowIndex = this.list.indexOf(nowDate);
      }
      newIndex = nowIndex - count;
      if (!this.list[newIndex]) {
        throw new OutRangeError(this.m, this.list);
      }
      this.m = moment(this.list[newIndex]);
      return this.m.format(this.format);
    }

  };

  module.exports = BusinessDay;

}).call(this);
